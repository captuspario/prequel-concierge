-- API surface
create schema if not exists api;
grant usage on schema api to anon, authenticated;

-- Extensions (UUIDs)
create extension if not exists pgcrypto with schema public;

-- Core tables (public)
create table if not exists public.tenants (
  id uuid primary key default gen_random_uuid(),
  slug text unique not null,
  name text not null,
  brand jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

create table if not exists public.offers (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid references public.tenants(id) on delete cascade,
  code text not null,
  title text not null,
  description text,
  stripe_price_id text,
  public boolean default true
);

create table if not exists public.configs (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid references public.tenants(id) on delete cascade,
  concierge jsonb not null
);

create table if not exists public.sessions (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid references public.tenants(id) on delete cascade,
  started_at timestamptz default now(),
  ended_at timestamptz
);

create table if not exists public.messages (
  id uuid primary key default gen_random_uuid(),
  session_id uuid references public.sessions(id) on delete cascade,
  role text check (role in ('user','assistant','system')) not null,
  content text not null,
  created_at timestamptz default now()
);

create table if not exists public.recommendations (
  id uuid primary key default gen_random_uuid(),
  session_id uuid references public.sessions(id) on delete cascade,
  summary text,
  next_step text check (next_step in ('call','quick_plan','workshop')),
  quick_plan_pdf_url text,
  created_at timestamptz default now()
);

create table if not exists public.bookings (
  id uuid primary key default gen_random_uuid(),
  session_id uuid references public.sessions(id) on delete cascade,
  calcom_event_type text,
  calcom_booking_url text,
  created_at timestamptz default now()
);

create table if not exists public.payments (
  id uuid primary key default gen_random_uuid(),
  session_id uuid references public.sessions(id) on delete cascade,
  stripe_mode text,                        -- 'payment_link' or 'checkout'
  stripe_url text,
  status text default 'created',
  created_at timestamptz default now()
);

create table if not exists public.events (
  id bigint generated by default as identity primary key,
  session_id uuid references public.sessions(id) on delete cascade,
  tenant_id uuid references public.tenants(id) on delete cascade,
  name text not null,                      -- 'chat_started','discovery_complete','cta_clicked','booked','paid'
  props jsonb default '{}'::jsonb,
  created_at timestamptz default now()
);

-- Enable RLS on all public tables (default-deny)
do $$
declare r record;
begin
  for r in
    select n.nspname as schema_name, c.relname as table_name
    from pg_class c
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname = 'public' and c.relkind = 'r'
  loop
    execute format('alter table %I.%I enable row level security;', r.schema_name, r.table_name);
  end loop;
end$$;

-- Safe connectivity check (no data exposure)
create or replace function api.healthcheck()
returns text
language sql
stable
as $$
  select 'ok'::text
$$;
